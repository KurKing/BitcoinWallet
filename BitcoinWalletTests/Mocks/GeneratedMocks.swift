///
/// @Generated by Mockolo
///



import Combine
import CoreData
import Foundation
@testable import BitcoinWallet


class AddTransactionButtonsViewModelMock: AddTransactionButtonsViewModel {
    init() { }


    private(set) var addTransactionCallCount = 0
    var addTransactionArgValues = [(name: String, categoryName: String, amount: String, date: Date, type: TransactionsViewType)]()
    var addTransactionHandler: ((String, String, String, Date, TransactionsViewType) async -> ())?
    func addTransaction(with name: String, categoryName: String, amount: String, date: Date, type: TransactionsViewType) async {
        addTransactionCallCount += 1
        addTransactionArgValues.append((name, categoryName, amount, date, type))
        if let addTransactionHandler = addTransactionHandler {
            await addTransactionHandler(name, categoryName, amount, date, type)
        }
        
    }

    private(set) var addMocksCallCount = 0
    var addMocksHandler: (() -> ())?
    func addMocks() {
        addMocksCallCount += 1
        if let addMocksHandler = addMocksHandler {
            addMocksHandler()
        }
        
    }
}

class AnalyticsServiceMock: AnalyticsService {
    init() { }


    private(set) var trackCallCount = 0
    var trackArgValues = [(event: AnalyticsEvent, parameters: [String: String])]()
    var trackHandler: ((AnalyticsEvent, [String: String]) -> ())?
    func track(event: AnalyticsEvent, parameters: [String: String]) {
        trackCallCount += 1
        trackArgValues.append((event, parameters))
        if let trackHandler = trackHandler {
            trackHandler(event, parameters)
        }
        
    }
}

class BitcoinRateServiceMock: BitcoinRateService {
    init() { }


    var rate: AnyPublisher<Double?, Never> { return self.rateSubject.eraseToAnyPublisher() }
    private(set) var rateSubject = PassthroughSubject<Double?, Never>()
}

class BalanceRepoMock: BalanceRepo {
    init() { }
    init(balance: BalanceDataModel) {
        self.balanceHandler = { balance }
    }


    var balanceHandler: (() async -> BalanceDataModel)?
    var balance: BalanceDataModel {
        get async {
            if let balanceHandler = balanceHandler {
                return await balanceHandler()
            }
            fatalError("balanceHandler returns can't have a default value thus its handler must be set")
        }
    }

    private(set) var setBalanceCallCount = 0
    var setBalanceArgValues = [BalanceDataModel]()
    var setBalanceHandler: ((BalanceDataModel) async throws -> ())?
    func setBalance(_ balance: BalanceDataModel) async throws {
        setBalanceCallCount += 1
        setBalanceArgValues.append(balance)
        if let setBalanceHandler = setBalanceHandler {
            try await setBalanceHandler(balance)
        }
        
    }
}

class BitcoinRateProviderMock: BitcoinRateProvider {
    init() { }
    init(rate: Double = 0.0) {
        self.rateHandler = { rate }
    }


    var rateHandler: (() async throws -> Double)?
    var rate: Double {
        get async throws {
            if let rateHandler = rateHandler {
                return try await rateHandler()
            }
            return 0.0
        }
    }
}

class AddTransactionModelMock: AddTransactionModel {
    init() { }


    private(set) var addTransactionCallCount = 0
    var addTransactionArgValues = [(name: String, categotyName: String, amount: Decimal, date: Date)]()
    var addTransactionHandler: ((String, String, Decimal, Date) async throws -> ())?
    func addTransaction(with name: String, categotyName: String, amount: Decimal, date: Date) async throws {
        addTransactionCallCount += 1
        addTransactionArgValues.append((name, categotyName, amount, date))
        if let addTransactionHandler = addTransactionHandler {
            try await addTransactionHandler(name, categotyName, amount, date)
        }
        
    }
}

class AddTransactionViewModelMock: AddTransactionViewModel {
    init() { }


    private(set) var addTransactionCallCount = 0
    var addTransactionArgValues = [(name: String, categoryName: String, amount: String, date: Date, type: TransactionsViewType)]()
    var addTransactionHandler: ((String, String, String, Date, TransactionsViewType) async -> ())?
    func addTransaction(with name: String, categoryName: String, amount: String, date: Date, type: TransactionsViewType) async {
        addTransactionCallCount += 1
        addTransactionArgValues.append((name, categoryName, amount, date, type))
        if let addTransactionHandler = addTransactionHandler {
            await addTransactionHandler(name, categoryName, amount, date, type)
        }
        
    }
}

class TransactionsGroupServiceMock: TransactionsGroupService {
    init() { }


    private(set) var mapCallCount = 0
    var mapArgValues = [[TransactionDataModel]]()
    var mapHandler: (([TransactionDataModel]) -> [TransactionDaySection])?
    func map(models: [TransactionDataModel]) -> [TransactionDaySection] {
        mapCallCount += 1
        mapArgValues.append(models)
        if let mapHandler = mapHandler {
            return mapHandler(models)
        }
        return [TransactionDaySection]()
    }
}

class BTCRateModelMock: BTCRateModel {
    init() { }


    var rate: AnyPublisher<Double?, Never> { return self.rateSubject.eraseToAnyPublisher() }
    private(set) var rateSubject = PassthroughSubject<Double?, Never>()
}

class BalanceServiceMock: BalanceService {
    init() { }


    var balance: AnyPublisher<Decimal, Never> { return self.balanceSubject.eraseToAnyPublisher() }
    private(set) var balanceSubject = PassthroughSubject<Decimal, Never>()
}

class TransactionRepoMock: TransactionRepo {
    init() { }


    var changes: AnyPublisher<TransactionRepoUpdate, Never> { return self.changesSubject.eraseToAnyPublisher() }
    private(set) var changesSubject = PassthroughSubject<TransactionRepoUpdate, Never>()

    private(set) var addCallCount = 0
    var addArgValues = [TransactionDataModel]()
    var addHandler: ((TransactionDataModel) async throws -> ())?
    func add(_ transaction: TransactionDataModel) async throws {
        addCallCount += 1
        addArgValues.append(transaction)
        if let addHandler = addHandler {
            try await addHandler(transaction)
        }
        
    }

    private(set) var getCallCount = 0
    var getArgValues = [(offset: Int, limit: Int)]()
    var getHandler: ((Int, Int) async throws -> [TransactionDataModel])?
    func get(offset: Int, limit: Int) async throws -> [TransactionDataModel] {
        getCallCount += 1
        getArgValues.append((offset, limit))
        if let getHandler = getHandler {
            return try await getHandler(offset, limit)
        }
        return [TransactionDataModel]()
    }
}

class BTCRateViewModelMock: BTCRateViewModel {
    init() { }


    var rate: AnyPublisher<String, Never> { return self.rateSubject.eraseToAnyPublisher() }
    private(set) var rateSubject = PassthroughSubject<String, Never>()
}

class BalanceViewModelMock: BalanceViewModel {
    init() { }


    var balance: AnyPublisher<Decimal, Never> { return self.balanceSubject.eraseToAnyPublisher() }
    private(set) var balanceSubject = PassthroughSubject<Decimal, Never>()
}

class TransactionsModelMock: TransactionsModel {
    init() { }
    init(viewBlocks: CurrentValueSubject<[TransactionsViewBlock], Never>) {
        self._viewBlocks = viewBlocks
    }


    var reloadEvent: AnyPublisher<Void, Never> { return self.reloadEventSubject.eraseToAnyPublisher() }
    private(set) var reloadEventSubject = PassthroughSubject<Void, Never>()


    private var _viewBlocks: CurrentValueSubject<[TransactionsViewBlock], Never>!
    var viewBlocks: CurrentValueSubject<[TransactionsViewBlock], Never> {
        get { return _viewBlocks }
        set { _viewBlocks = newValue }
    }

    private(set) var fetchTransactionsCallCount = 0
    var fetchTransactionsArgValues = [(offset: Int, limit: Int)]()
    var fetchTransactionsHandler: ((Int, Int) async -> ())?
    func fetchTransactions(offset: Int, limit: Int) async {
        fetchTransactionsCallCount += 1
        fetchTransactionsArgValues.append((offset, limit))
        if let fetchTransactionsHandler = fetchTransactionsHandler {
            await fetchTransactionsHandler(offset, limit)
        }
        
    }
}

class BalanceViewViewModelMock: BalanceViewViewModel {
    init() { }


    var balance: AnyPublisher<String, Never> { return self.balanceSubject.eraseToAnyPublisher() }
    private(set) var balanceSubject = PassthroughSubject<String, Never>()
}

class TransactionsViewModelMock: TransactionsViewModel {
    init() { }
    init(items: CurrentValueSubject<[TransactionsViewBlock], Never>) {
        self._items = items
    }



    private var _items: CurrentValueSubject<[TransactionsViewBlock], Never>!
    var items: CurrentValueSubject<[TransactionsViewBlock], Never> {
        get { return _items }
        set { _items = newValue }
    }

    private(set) var onScrollToTheEndCallCount = 0
    var onScrollToTheEndHandler: (() -> ())?
    func onScrollToTheEnd() {
        onScrollToTheEndCallCount += 1
        if let onScrollToTheEndHandler = onScrollToTheEndHandler {
            onScrollToTheEndHandler()
        }
        
    }
}

class CoreDataContextProviderMock: CoreDataContextProvider {
    init() { }
    init(backgroundContext: NSManagedObjectContext) {
        self.backgroundContextHandler = { backgroundContext }
    }


    var backgroundContextHandler: (() async -> NSManagedObjectContext)?
    var backgroundContext: NSManagedObjectContext {
        get async {
            if let backgroundContextHandler = backgroundContextHandler {
                return await backgroundContextHandler()
            }
            fatalError("backgroundContextHandler returns can't have a default value thus its handler must be set")
        }
    }
}

class AddTransactionScreenViewModelMock: AddTransactionScreenViewModel {
    init() { }
    init(isAddButtonEnabled: CurrentValueSubject<Bool, Never>, amount: CurrentValueSubject<String, Never>, name: CurrentValueSubject<String, Never>, category: CurrentValueSubject<String, Never>, date: CurrentValueSubject<Date, Never>) {
        self._isAddButtonEnabled = isAddButtonEnabled
        self._amount = amount
        self._name = name
        self._category = category
        self._date = date
    }


    private(set) var addTransactionWithCallCount = 0
    var addTransactionWithArgValues = [(name: String, categoryName: String, amount: String, date: Date, type: TransactionsViewType)]()
    var addTransactionWithHandler: ((String, String, String, Date, TransactionsViewType) async -> ())?
    func addTransaction(with name: String, categoryName: String, amount: String, date: Date, type: TransactionsViewType) async {
        addTransactionWithCallCount += 1
        addTransactionWithArgValues.append((name, categoryName, amount, date, type))
        if let addTransactionWithHandler = addTransactionWithHandler {
            await addTransactionWithHandler(name, categoryName, amount, date, type)
        }
        
    }


    private var _isAddButtonEnabled: CurrentValueSubject<Bool, Never>!
    var isAddButtonEnabled: CurrentValueSubject<Bool, Never> {
        get { return _isAddButtonEnabled }
        set { _isAddButtonEnabled = newValue }
    }


    private var _amount: CurrentValueSubject<String, Never>!
    var amount: CurrentValueSubject<String, Never> {
        get { return _amount }
        set { _amount = newValue }
    }


    private var _name: CurrentValueSubject<String, Never>!
    var name: CurrentValueSubject<String, Never> {
        get { return _name }
        set { _name = newValue }
    }


    private var _category: CurrentValueSubject<String, Never>!
    var category: CurrentValueSubject<String, Never> {
        get { return _category }
        set { _category = newValue }
    }


    private var _date: CurrentValueSubject<Date, Never>!
    var date: CurrentValueSubject<Date, Never> {
        get { return _date }
        set { _date = newValue }
    }

    private(set) var addTransactionCallCount = 0
    var addTransactionHandler: (() async -> ())?
    func addTransaction() async {
        addTransactionCallCount += 1
        if let addTransactionHandler = addTransactionHandler {
            await addTransactionHandler()
        }
        
    }
}

class BitcoinRateRepoMock: BitcoinRateRepo {
    init() { }
    init(rate: Double = 0.0) {
        self.rateHandler = { rate }
    }


    var rateHandler: (() async throws -> Double)?
    var rate: Double {
        get async throws {
            if let rateHandler = rateHandler {
                return try await rateHandler()
            }
            return 0.0
        }
    }

    private(set) var saveCallCount = 0
    var saveArgValues = [Double]()
    var saveHandler: ((Double) async throws -> ())?
    func save(rate: Double) async throws {
        saveCallCount += 1
        saveArgValues.append(rate)
        if let saveHandler = saveHandler {
            try await saveHandler(rate)
        }
        
    }
}



